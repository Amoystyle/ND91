/***************************************************************************//**
 *  @file 
 *  @brief [线程节点类，存储了线程节点的相关信息，线程内部通过每个线程的线程节点对线程进行控制]
 * 
 *  <b>文件名</b>      : ThreadInfo.h
 *  @n@n<b>版权所有</b>: 网龙天晴程序部应用软件开发组
 *  @n@n<b>作  者</b>  : alzq
 *  @n@n<b>创建时间</b>: 09-2-5 15:45:38
 *  @n@n<b>文件描述</b>: 
 *  @version  版本        修改者        时间        描述@n
 *  @n        [版本号]    alzq          2009-02-06  [描述]
 * 
*******************************************************************************/
#ifndef __THREAD_INFO__
#define __THREAD_INFO__

#include "ThreadEvent.h"
#include "ThreadMutex.h"
#include "DealSectionControl.h"

#pragma once

//用户退出线程的自定义执行函数
typedef BOOL (* DELETE_THREAD_FUNCTION) (LPVOID );
//用户线程函数定义
typedef DWORD (* USER_FUNCTION) (LPVOID );

class ThreadInfo
{
	friend class ThreadLog;
	friend class ThreadControl;
	friend class ThreadTreeControl;
	friend class TUIThread;
	friend struct ThreadTreeGlobalInfo;

/**
 *
 *	-------------构造析构函数定义区
 *
 **/
public:
	ThreadInfo(LPVOID userData, DELETE_THREAD_FUNCTION exitThreadFunc, LPVOID control, char * name);
	~ThreadInfo(void);

/**
 *
 *	-------------成员变量声明区
 *
 **/
protected:
	UINT				_m_uiThreadState;					//线程状态标志变量，存储当前线程状态

	SINGLELIST			_m_slGetMutexList;					//本线程获取控制权的锁节点标志队列

	SINGLEWAITLIST		_m_swlWaitSingleList;				//本线程等待的锁或信号量与其获取状态队列

	BOOL				_m_bResetWaitTimeEnable;			//表示本线程在等待多个锁或信号量时，是否在获取到其中的一个时重新设置等待时间
	DWORD				_m_iWaitTimeInit;					//本线程此次等待的初始时间
	DWORD				_m_iWaitTimeCount;					//本线程此次等待的时间统计

	UINT				_m_uiWaitState;						//表示本线程此次等待状态（无限等待还是有限等待）

	HANDLE				_m_hFinalMutex;						//表示线程执行完毕的信号量（使用自身的信号量存储树结构进行控制）

	THREADTARGET		_m_ttThreadTarget;					//存储线程相关信息

	LPVOID				_m_lpUserData;						//用户带入线程的指针

	int					_m_iChildCount;						//本线程节点下的子线程节点统计

	DELETE_THREAD_FUNCTION _m_dtfDeleteThreadFunc;			//退出线程的函数指针

	char *				_m_csThreadName;					//线程名称主要为了查询而存在

	bool				_m_bAddLogEnable;					//是否输出与本线程有关的线程树LOG记录，默认为false

private:
	LPVOID				_m_lpTreeItem;						//在线程树中节点地址

	LPVOID				_m_lpControl;						//CONTROL对象地址

	DealSectionControl * _m_csDealLock;					//操作对象的临界区域
/**
 *
 *	-------------公共函数声明区
 *
 **/
public:

/**
 *
 *	-------------保护类函数声明区
 *
 **/
protected:
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [获取用户带入数据]
	 * @n<b>函数名称</b>: GetUserInfo
	 * @return            [返回值描述]
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-13 14:47:18
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-13  [描述]
	 ******************************************************************************************************/
	LPVOID _GetUserInfo(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [等待某个信号量或锁]
	 * @n<b>函数名称</b>         : WaitForSingle
	 * @n@param SINGLE * single  : [信号量或锁的存储地址]
	 * @param   DWORD    millSec : [等待时间， INFINITE 时为无限等待]
	 * @return                     [返回等待的结果]
	 * @see                        [参见函数]
	 * @n<b>作者</b>             :alzq
	 * @n<b>创建时间</b>         : 09-2-6 14:12:29
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	UINT _TWaitForSingle(SINGLE * single, DWORD millSec = INFINITE);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [等待多个锁或信号量的集合]
	 * @n<b>函数名称</b>                  : WaitForSingleList
	 * @n@param SINGLELIST singleList     : [锁或信号量的节点队列]
	 * @param   DWORD      millSec        : [等待时间， INFINITE 时为无限等待]
	 * @param   BOOL       resetTimeCount : [在等待一个成功时，是否重新设置等待时间的指示变量]
	 * @return                              [返回等待的结果]
	 * @see                                 [参见函数]
	 * @n<b>作者</b>                      :alzq
	 * @n<b>创建时间</b>                  : 09-2-6 14:22:07
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	UINT _TWaitForSingleList(SINGLELIST singleList, DWORD millSec = INFINITE, BOOL resetTimeCount = FALSE);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [以本线程为父节点创建锁]
	 * @n<b>函数名称</b>                : TCreateMutex
	 * @n@param BOOL          initState : [初始状态]
	 * @param   const WCHAR * name      : [锁名称，默认为空]
	 * @return                            [返回值描述]
	 * @see                               [参见函数]
	 * @n<b>作者</b>                    :alzq
	 * @n<b>创建时间</b>                : 09-2-6 14:24:52
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	SINGLE * _TCreateMutex(BOOL initOwner = FALSE, const WCHAR * name = NULL);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [函数详细描述]
	 * @n<b>函数名称</b>                : TCreateEvent
	 * @n@param BOOL          autoReSet : [是否自动转化信号状态]
	 * @param   BOOL          initState : [初始状态]
	 * @param   const WCHAR * name      : [信号量名称，默认为空]
	 * @return                            [返回值描述]
	 * @see                               [参见函数]
	 * @n<b>作者</b>                    :alzq
	 * @n<b>创建时间</b>                : 09-2-6 14:26:27
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	SINGLE * _TCreateEvent(BOOL autoReSet = FALSE, BOOL initState = FALSE, const WCHAR * name = NULL);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [释放锁]
	 * @n<b>函数名称</b>        : TReleaseMutex
	 * @n@param SINGLE * single : [锁的节点地址]
	 * @return                    [返回值描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 14:51:04
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	UINT _TReleaseMutex(SINGLE * single);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [设置信号量为有信号状态]
	 * @n<b>函数名称</b>        : TSetEventSingle
	 * @n@param SINGLE * single : [信号量的节点地址]
	 * @return                    [返回值描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 14:57:03
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	UINT _TSetEventSingle(SINGLE * single);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [设置信号量为无信号状态]
	 * @n<b>函数名称</b>        : TSetEventNoSingle
	 * @n@param SINGLE * single : [信号量的节点地址]
	 * @return                    [返回值描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 14:57:06
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	UINT _TSetEventNoSingle(SINGLE * single);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [释放所有控制的锁]
	 * @n<b>函数名称</b>: _ReleaseAllControlMutex
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-25 10:50:00
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-25  [描述]
	 ******************************************************************************************************/
	void _ReleaseAllControlMutex(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [检验当前所在线程是否与本节点所指线程相同]
	 * @n<b>函数名称</b>: _CheckThread
	 * @return            [返回值描述]
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-19 9:02:51
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-19  [描述]
	 ******************************************************************************************************/
	BOOL _CheckThread(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [根据本线程存储的相关参数挂起本线程]
	 * @n<b>函数名称</b>: TSuspendThread
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-16 9:12:42
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-16  [描述]
	 ******************************************************************************************************/
	void _TSuspendThread(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [根据本线程存储的相关参数恢复本线程]
	 * @n<b>函数名称</b>: TResumeThread
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-16 9:12:42
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-16  [描述]
	 ******************************************************************************************************/
	void _TResumeThread(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [清空相关的等待队列，初始化相关变量]
	 * @n<b>函数名称</b>: _ClearWaitingSingleList
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-10 13:33:02
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-10  [描述]
	 ******************************************************************************************************/
	void _InitWaitingSituation(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [释放所有等待中的SINGLE队列中已经获取到的锁或信号量]
	 * @n<b>函数名称</b>: _ReleaseAllWaitingSingle
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-10 13:48:47
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-10  [描述]
	 ******************************************************************************************************/
	void _ReleaseAllWaitingSingle(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [设置等待SINGLE的状态]
	 * @n<b>函数名称</b>        : _SetSingleState
	 * @n@param SINGLE * single : [等待的SINGLE地址]
	 * @param   UINT     state  : [需要设置的状态]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-10 17:40:49
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-10  [描述]
	 ******************************************************************************************************/
	void _SetSingleState(SINGLE * single, UINT state);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [根据等待时间设置等待状态为无限等待还是有限时间等待，并设置等待时间与初始等待时间]
	 * @n<b>函数名称</b>         : _SetWaitStateBySec
	 * @n@param int millSec      : [等待时间]
	 * @see                        [参见函数]
	 * @n<b>作者</b>             :alzq
	 * @n<b>创建时间</b>         : 09-2-9 15:17:21
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-09  [描述]
	 ******************************************************************************************************/
	void _SetWaitStateBySec(DWORD millSec);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [设置线程执行状态]
	 * @n<b>函数名称</b>   : _SetState
	 * @n@param UINT state : [参数描述]
	 * @see                  [参见函数]
	 * @n<b>作者</b>       :alzq
	 * @n<b>创建时间</b>   : 09-2-9 14:05:07
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-09  [描述]
	 ******************************************************************************************************/
	void _SetState(UINT state);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [等待信号量的处理函数]
	 * @n<b>函数名称</b>         : _WaitForEvent
	 * @n@param SINGLE * single  : [信号量存储结构体]
	 * @param   DWORD    millSec : [等待时间，0为马上返回，INFINTE为无限等待]
	 * @return                     [返回值描述]
	 * @see                        [参见函数]
	 * @n<b>作者</b>             :alzq
	 * @n<b>创建时间</b>         : 09-2-9 11:55:30
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-09  [描述]
	 ******************************************************************************************************/
	UINT _WaitForEvent(SINGLE * single, DWORD millSec);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [等待锁的处理函数]
	 * @n<b>函数名称</b>         : _WaitForMutex
	 * @n@param SINGLE * single  : [锁指针存储结构体]
	 * @param   DWORD    millSec : [等待时间，0为马上返回，INFINTE为无限等待]
	 * @return                     [返回值描述]
	 * @see                        [参见函数]
	 * @n<b>作者</b>             :alzq
	 * @n<b>创建时间</b>         : 09-2-9 11:56:09
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-09  [描述]
	 ******************************************************************************************************/
	UINT _WaitForMutex(SINGLE * single, DWORD millSec);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [获取下一个在等待的锁或信号量，没有下一个则返回NULL]
	 * @n<b>函数名称</b>: _GetFirstWaitSingle
	 * @return            [返回值描述]
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-6 16:05:02
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	SINGLE * _GetFirstWaitSingle(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [将等待的锁或信号凉添加到相关的队列中]
	 * @n<b>函数名称</b>         : _AddWaitingSingle
	 * @n@param SINGLE * single  : [参数描述]
	 * @param   DWORD    millSec : [等待时间INFINTE 为无限等待]
	 * @see                        [参见函数]
	 * @n<b>作者</b>             :alzq
	 * @n<b>创建时间</b>         : 09-2-6 16:39:11
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	WAITSTATE * _AddWaitingSingle(SINGLE * single, DWORD millSec);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [在本线程拥有控制权的锁队列中添加指定锁节点]
	 * @n<b>函数名称</b>        : _AddControlMutex
	 * @n@param SINGLE * single : [参数描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-9 16:35:30
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-09  [描述]
	 ******************************************************************************************************/
	void _AddControlMutex(SINGLE * single);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [在本线程拥有控制权的锁队列中删除指定锁节点]
	 * @n<b>函数名称</b>        : _DelControlMutex
	 * @n@param SINGLE * single : [参数描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-9 16:35:35
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-09  [描述]
	 ******************************************************************************************************/
	void _DelControlMutex(SINGLE * single);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [清空等待队列中所有SINGLE]
	 * @n<b>函数名称</b>: _ClearWaitingSingleList
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-18 15:36:03
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-18  [描述]
	 ******************************************************************************************************/
	void _ClearWaitingSingleList(void);
};

#endif
