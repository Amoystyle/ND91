/***************************************************************************//**
 *  @file 
 *  @brief [锁节点类，存储了锁节点的相关信息]
 * 
 *  <b>文件名</b>      : ThreadMutex.h
 *  @n@n<b>版权所有</b>: 网龙天晴程序部应用软件开发组
 *  @n@n<b>作  者</b>  : alzq
 *  @n@n<b>创建时间</b>: 09-2-6 9:51:26
 *  @n@n<b>文件描述</b>: 
 *  @version  版本        修改者        时间        描述@n
 *  @n        [版本号]    alzq          2009-02-06  [描述]
 * 
*******************************************************************************/
#ifndef __THREAD_MUTEX__
#define __THREAD_MUTEX__

#include "ThreadHeader.h"
#include "DealSectionControl.h"

#pragma once

class ThreadMutex
{
	friend class ThreadInfo;
	friend class ThreadTreeControl;

public:
	ThreadMutex(LPVOID controlThread, BOOL initOwner, const CTCHAR * name);
	~ThreadMutex(void);

/**
 *
 *	-------------成员变量声明区
 *
 **/
protected:
	THREADLIST			_m_tlWaitThreadList;				//等待本锁的线程节点地址队列

	LPVOID				_m_tlControlThread;					//获取本锁控制权的线程节点地址

	int					_m_iLockTime;						//本锁的加锁次数，当锁为可控制状态时，加锁次数为0

	CTCHAR *			_m_csMutexName;						//锁的名称

private:
	DWORD				_m_dwTreeID;						//此锁在树型结构中的编号

	DealSectionControl * _m_csDealLock;						//操作对象的临界区域

/**
 *
 *	-------------公共函数声明区
 *
 **/
public:

/**
 *
 *	-------------保护类函数声明区
 *
 **/
protected:
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [获取锁是否能控制]
	 * @n<b>函数名称</b>: _GetMutexLockEnable
	 * @return            [返回值描述]
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-6 16:10:36
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	BOOL _GetMutexLockEnable(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [检查线程是否拥有控制权]
	 * @n<b>函数名称</b>        : _CheckThreadGetControl
	 * @n@param LPVOID lpThread : [线程指针]
	 * @return                    [返回值描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 16:21:50
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	BOOL _CheckThreadGetControl(LPVOID lpThread);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [线程对锁进行锁定，返回是否获取锁成功]
	 * @n<b>函数名称</b>        : _ThreadTryLockMutex
	 * @n@param LPVOID lpThread : [线程节点地址]
	 * @return                    [返回值描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 16:25:34
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	BOOL _ThreadTryLockMutex(LPVOID lpThread);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [在本锁的等待线程队列中添加线程节点地址]
	 * @n<b>函数名称</b>        : _AddWaitingThread
	 * @n@param LPVOID lpThread : [参数描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 16:38:40
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	void _AddWaitingThread(LPVOID lpThread);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [释放锁（将锁的加锁次数减1，需要对锁的拥有权进行判断]
	 * @n<b>函数名称</b>        : _ReduceLockTimeMutex
	 * @n@param LPVOID lpThread : [参数描述]
	 * @return                    [返回是否释放成功，当线程不拥有控制权时则释放不成功]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 17:02:22
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	BOOL _ReduceLockTimeMutex(LPVOID lpThread);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [获取下一个在等待该锁的线程节点地址]
	 * @n<b>函数名称</b>: _GetFirstWaitingThread
	 * @return            [返回值描述]
	 * @see               [参见函数]
	 * @n<b>作者</b>    :alzq
	 * @n<b>创建时间</b>: 09-2-6 17:08:54
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	LPVOID _GetFirstWaitingThread(void);
	/*******************************************************************************************************
	 * @brief [函数简要描述]
	 * 
	 * [将等待线程节点从本锁的等待线程队列中删除]
	 * @n<b>函数名称</b>        : _DelWaitingThread
	 * @n@param LPVOID lpThread : [参数描述]
	 * @see                       [参见函数]
	 * @n<b>作者</b>            :alzq
	 * @n<b>创建时间</b>        : 09-2-6 17:11:19
	 * @version    修改者        时间        描述@n
	 * @n          alzq          2009-02-06  [描述]
	 ******************************************************************************************************/
	void _DelWaitingThread(LPVOID lpThread);


};

#endif
